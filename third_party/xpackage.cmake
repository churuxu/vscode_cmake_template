

#download file (if not exist)
macro(xpackage_download url localfile)
	set(status_file_ "${localfile}.d")
	if(NOT EXISTS ${status_file_})
		message("-- Download ${url}")		
		file(DOWNLOAD ${url} ${localfile} STATUS result_)
		if(0 IN_LIST result_)
			file(TOUCH ${status_file_})
			message("-- Download OK")
		else()
			message(FATAL_ERROR "Download Error: ${result_}")
		endif()		
	endif()
endmacro()


#unpack (if not unpacked)
macro(xpackage_unpack localfile dir)
	set(status_file_ "${localfile}.u")
	if(NOT EXISTS ${status_file_})
		message("-- Unpack ${localfile}")
		file(MAKE_DIRECTORY ${dir})
		if(${localfile} MATCHES ".*.zip$")
			set(cmd_ unzip -o ${localfile} -d ${dir})
		elseif(${localfile} MATCHES ".*.tar.gz$")
			set(cmd_ tar -zxvf ${localfile} -C ${dir})
		elseif(${localfile} MATCHES ".*.tar.xz$")
			set(cmd_ tar -Jxvf ${localfile} -C ${dir})
		else()
			message(FATAL_ERROR "Not support file type")
		endif()		
		execute_process(RESULT_VARIABLE result_ COMMAND ${cmd_})
		if(0 EQUAL result_)
			file(TOUCH ${status_file_})
			message("-- Unpack OK")
		else()		
			message(FATAL_ERROR "Unpack Error")
		endif()		
	endif()
endmacro()


#download and unpack source (unpack to ${dir}/source)
macro(xpackage_fetch url dir)
	if(${url} MATCHES ".*.zip$")
		set(save_name_ "source.zip")
	elseif(${url} MATCHES ".*.tar.gz$")
		set(save_name_ "source.tar.gz")
	elseif(${url} MATCHES ".*.tar.xz$")
		set(save_name_ "source.tar.xz")
	else()
		message(FATAL_ERROR "Not support file type of ${url}")
	endif()	
	xpackage_download(${url} ${dir}/${save_name_})
	xpackage_unpack(${dir}/${save_name_} ${dir}/source)
endmacro()


#get xpackage home dir
macro(xpackage_get_home outvar)
	if(${CMAKE_HOST_WIN32})				
		set(env_dir_ $ENV{USERPROFILE}/.xpackage)
		file(TO_CMAKE_PATH "${env_dir_}" dir_)
	else()
		set(dir_ $ENV{HOME}/.xpackage) 
	endif()
	set(${outvar} ${dir_})
endmacro()



#get build info
macro(xpackage_get_build_info outvar)
	set(info_ "")
	set(info_ "${info_}os=${CMAKE_SYSTEM_NAME}\n")
	set(info_ "${info_}cc=${CMAKE_C_COMPILER}\n")
	set(info_ "${info_}cc.version=${CMAKE_C_COMPILER_VERSION}\n")
	set(info_ "${info_}cxx=${CMAKE_CXX_COMPILER}\n")
	set(info_ "${info_}cxx.version=${CMAKE_CXX_COMPILER_VERSION}\n")	
	set(info_ "${info_}cflags=${CMAKE_C_FLAGS}\n")
	set(info_ "${info_}cxxflags=${CMAKE_CXX_FLAGS}\n")
	if(NOT ${CMAKE_C_COMPILER_ID} STREQUAL MSVC)
		if("${CMAKE_BUILD_TYPE}" STREQUAL "")
			set(CMAKE_BUILD_TYPE Release)
		endif()
		set(info_ "${info_}build_type=${CMAKE_BUILD_TYPE}\n")
	endif()	
	set(${outvar} "${info_}")
endmacro()


#set build output dir
macro(xpackage_init_build_path outvar package ver)
	xpackage_get_build_info(build_info_)
	xpackage_get_home(home_)	
	string(MD5 build_hash_ "${build_info_}")	
	set(build_dir_ ${home_}/${package}/${ver}/build/${build_hash_})
	file(MAKE_DIRECTORY ${build_dir_})
	file(WRITE ${build_dir_}/build_info.txt "${build_info_}")
	set(${outvar} ${build_dir_})
endmacro()


#export find info
macro(xpackage_export target_name build_dir includes defs)
	set(export_info_ "")
	set(export_info_ "${export_info_}link_directories(${build_dir})\n")
	foreach(def_ IN LISTS ${defs})
		set(export_info_ "${export_info_}add_definitions(${def_})\n")
	endforeach()	
	foreach(dir_ IN LISTS ${includes})
		set(export_info_ "${export_info_}include_directories(${dir_})\n")
	endforeach()
	set(export_file_ ${CMAKE_BINARY_DIR}/Find${target_name}.cmake)
	if(EXISTS ${export_file_})
		file(READ ${export_file_} old_info_)
	endif()
	if(NOT "${old_info_}" STREQUAL "${export_info_}")
		file(WRITE ${export_file_} "${export_info_}")
	endif()
endmacro()


#build lib
macro(xpackage_build_target target_name build_dir srcs includes defs)
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${build_dir})
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${build_dir})
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${build_dir})
	set(target_file_ ${build_dir}/lib${target_name}.a)
	if(NOT TARGET ${target_name})
		if(EXISTS ${target_file_})
			message("-- Import ${target_file_}")
			add_library(${target_name} STATIC IMPORTED GLOBAL)
			set_target_properties(${target_name} PROPERTIES IMPORTED_LOCATION ${target_file_})
		else()
			message("-- Build ${target_file_}")
			set(srcs_ )
			foreach(src_ IN LISTS ${srcs})			
				list(APPEND srcs_ ${src_})
			endforeach()
			foreach(inc_ IN LISTS ${includes})			
				include_directories(${inc_})
			endforeach()			
			add_library(${target_name} ${srcs_})
		endif()
		xpackage_export(${target_name} ${build_dir} "${includes}" "${defs}")
	endif()	
endmacro()


#glob src
macro(xpackage_glob_src outvar exp exludes)
	file(GLOB_RECURSE ${outvar} ${exp})
	list(FILTER ${outvar} EXCLUDE REGEX "CMakeFiles")
	foreach(exl IN LISTS ${exludes}) 
		list(FILTER ${outvar} EXCLUDE REGEX ${exl})
	endforeach()	
endmacro()


#init
macro(xpackage_init name ver url flags srcdir builddir)
	project(${PACKAGE_NAME})
	set(CMAKE_C_FLAGS ${flags})
	set(CMAKE_CXX_FLAGS ${flags})
	xpackage_get_home(home_)
	xpackage_fetch(${url} ${home_}/${name}/${ver})
	xpackage_init_build_path(build_dir_ ${name} ${ver})
	set(${srcdir} ${home_}/${name}/${ver}/source)
	set(${builddir} ${build_dir_})
endmacro()

